# Exercise - Rollback
# this is a cloud formation template that creates a simple ec2 instance


Description: Creating EC2 instance using Circle CI CD 

Parameters:
  # specifying the VPC cause without it the SecurityGroup can't be created
  VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this
        Type: String
        Default: 10.0.0.0/16
  
  EnvironmentName:
        Description: An environment name that will be prefixed to resources
        Type: String
        Default: "walexkino"
        
  PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.0.0.0/24


Resources:

  #creating VPC resources
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
          - Key: Name
            Value: !Ref EnvironmentName

#creating EC2 instance
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      # SecurityGroupIds:
      #   - !Ref InstanceSecurityGroup

      # Change this, as applicable to you   
      # This is the name of the keypair that was created and downloaded in the AWS console   
      KeyName: infrastructurecicd

      # Change this, as applicable to you
      # You may need to find out what instance types are available in your region - use https://cloud-images.ubuntu.com/locator/ec2/
      # Software Image (AMI)
      ImageId: 'ami-090fa75af13c156b4' 

      # Virtual server type (instance type)
      InstanceType: t2.micro
      
      #SubnetId: 

      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
              - !Ref InstanceSecurityGroup
          SubnetId: !Ref PublicSubnet

      Tags: 
          - Key: Name
            Value: !Ref EnvironmentName


      #creating instance SecurityGroup Resource, remeber it has already been referenced in the EC2Instance resource created
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22 

      # enabling inbound rules which includes port 22 -ssh port, port 80 and 443
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0 

        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0  
      
      #outbound rules allowing a range from 0 - 65535 >> of course we want out servers to accesss resources from outside
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      
      VpcId: !Ref myVPC

  #public subent created

  PublicSubnet: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      # AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ''] 
      Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  # internet gateway resource

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
          - Key: Name 
            Value: !Ref EnvironmentName

  VPCInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref InternetGateway

    # Adding routing tables for our subnet so that traffic can flow from IGW to the internal resource
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
          - Key: Name 
            Value: !Sub ${EnvironmentName} Public Routes
  
    # Public route table has direct routing to IGW:
  PublicRoute1:  
    Type: AWS::EC2::Route
    DependsOn: VPCInternetGatewayAttachment  
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0 # allowing any IPs through the routing table
      GatewayId: !Ref InternetGateway  
  
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet 